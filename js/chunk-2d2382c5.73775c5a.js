(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d2382c5"],{fdf7:function(s,a,e){"use strict";e.r(a);var t=function(){var s=this,a=s.$createElement;s._self._c;return s._m(0)},r=[function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("section",[e("p",[s._v("Hey there!\nBefore I begin, I need to mention the fact that a considerable percent of this post could not be done without the help of "),e("a",{attrs:{href:"https://wp.kntu.ac.ir/nasihatkon/"}},[s._v("Dr. Nasihatkon")]),s._v(" and "),e("a",{attrs:{href:"https://batchloaf.wordpress.com/2017/02/12/a-simple-way-to-read-and-write-audio-and-video-files-in-c-using-ffmpeg-part-2-video/"}},[s._v("this blog")]),s._v(".")]),e("p",[s._v("This is the template code I used to conduct final project of x86 Assembly course in KNTU, taught by Dr. Behrooz Nasihatkon in Spring 2020. The main idea of this project was to let students do a fairly simple image processing task in basic x86 Assembly as the first part, and for the second, do the same using SIMD features. Finally, compare their results' timings with the normal compilation of such task in C and also the compilation with optimized flag enabled.")]),e("p",[s._v("The task was pixel-wise addition of two same length videos frame by frame. Fairly simple! But good for practicing Assembly and SIMD ;)")]),e("p",[s._v("Here are the instructions to interface an Assembly code with C in order to do image processing. I hope this will help you spend much less time than I did on the errors!")]),e("p",[s._v("First, for the sake of simplicity, we define our global Width and Height used in the entire code.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<stdio.h>")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<string.h>")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<stdlib.h>")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<unistd.h>")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<limits.h>")])]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("include")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-meta-string"}},[s._v("<sys/resource.h>")])]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typedef")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("long")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("long")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" uint64;\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Video resolution")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("define")]),s._v(" W 1796")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-meta"}},[s._v("#"),e("span",{pre:!0,attrs:{class:"hljs-meta-keyword"}},[s._v("define")]),s._v(" H 738")]),s._v("\n")])]),e("p",[s._v('Next, is to define main arrays and varriables used in the further processings. Here we think of images as 3D arrays that use RGB to indicate each pixel value. We also consider values as "uint8", thus they can be presented in 1 byte.')]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Each image is a 3D array (W x H x 3)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Each pixel value is represented by 3 bytes (Red, Green, Blue)")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Arrays are 32-bit aligned to use with SIMD aligned instruction in SSE2/AVX/etc.")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// see https://gcc.gnu.org/onlinedocs/gcc-3.2/gcc/Variable-Attributes.html")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame1[H][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]         __attribute__((aligned("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v("))) = {"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("}; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 32-bit aligned for SSE2/AVX")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame2[H][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]         __attribute__((aligned("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v("))) = {"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("}; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 32-bit aligned for SSE2/AVX")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame_out_base[H][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("] __attribute__((aligned("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v("))) = {"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("}; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 32-bit aligned for SSE2/AVX")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame_out[H][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("]      __attribute__((aligned("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v("))) = {"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("}; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// 32-bit aligned for SSE2/AVX")]),s._v("\n\n")])]),e("p",[s._v("Next we need our 4 different ways of performing the task. that is using C, using C with optimized compilation, using basic Assembly, and using SIMD (either SSE2 or AVX). All of the mentioned, will have exactly same prototype however with different implementaitons. Therefore we use one single prototype for all of them.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("typedef")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("MergeFunc")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" h,"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" w,"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame1[][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("],"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame2[][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("],"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame_out[][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("])")])]),s._v(";\n\nMergeFunc merge_frames;\nMergeFunc merge_frames_opt;\nMergeFunc merge_frames_asm;\nMergeFunc merge_frames_simd;\n")])]),e("p",[s._v("As mentioned in the above, we will need to measure the time of each method percisely. Here we use inline assemly to do the best we can.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" lo,hi;             "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// used to measure   clock cycles")]),s._v("\nuint64 ticks, start, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v(";       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// used for mesuring clock cycles")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("void")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("tic")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("asm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("volatile")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"rdtsc"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=a"')]),s._v(" (lo), "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=d"')]),s._v(" (hi))")])]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// inline assembly")]),s._v("\n  start = ((uint64)hi << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v(") | lo;\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("uint64 "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("toc")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("asm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("volatile")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"rdtsc"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=a"')]),s._v(" (lo), "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=d"')]),s._v(" (hi))")])]),s._v("; "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// inline assembly")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v(" = ((uint64)hi << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v(") | lo;\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v("-start;\n}\n\n"),e("span",{pre:!0,attrs:{class:"hljs-function"}},[s._v("uint64 "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("measure_tics_per_sec")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" lo,hi;             "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// used to measure   clock cycles")]),s._v("\n  uint64 start, "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v(";       "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// used for mesuring clock cycles")]),s._v("\n    \n  "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("asm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("volatile")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"rdtsc"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=a"')]),s._v(" (lo), "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=d"')]),s._v(" (hi))")])]),s._v(";    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// inline assembly")]),s._v("\n    start = ((uint64)hi << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v(") | lo;\n        \n    sleep("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(");\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("asm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("volatile")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"rdtsc"')]),s._v(" : "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=a"')]),s._v(" (lo), "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"=d"')]),s._v(" (hi))")])]),s._v(";    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// inline assembly")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v(" = ((uint64)hi << "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("32")]),s._v(") | lo;\n\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("end")]),s._v("-start;\n}\n")])]),e("p",[s._v("In order to make sure all of the implementations produce same output, we implement a difference measurement function.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("array_diff")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame1[][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("],"),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" frame2[][W]["),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v("])")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" n_diff = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" n_bytes = W*H*"),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n  \n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" *array1 = ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" *) frame1;\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" *array2 = ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("unsigned")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" *) frame2;\n   \n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("for")]),s._v(" ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" i = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("; i < n_bytes; i++)\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (array1[i] != array2[i])\n      n_diff++;\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" n_diff;\n}\n")])]),e("p",[s._v("In order to reduce complexity for students, we have already implemented the task in C. We only leave the basic Assembly and SIMD implementations for students.")]),e("p",[s._v("We also implement a "),e("code",{pre:!0},[s._v("maximum()")]),s._v(" function to make the code more clean.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("maximum")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" a, "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" b)")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("return")]),s._v(" a > b ? a : b;\n}\n")])]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[e("span",{pre:!0,attrs:{class:"hljs-function"}},[e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"hljs-title"}},[s._v("main")]),e("span",{pre:!0,attrs:{class:"hljs-params"}},[s._v("()")]),s._v(" ")]),s._v("{\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" n_bytes = H * W * "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("3")]),s._v(";\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hold total time spent on each method")]),s._v("\n  uint64 total_time_c = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  uint64 total_time_c_opt = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  uint64 total_time_asm="),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  uint64 total_time_simd="),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n\n  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// hold the cumulative error made on entire video.")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" c_opt_diff = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" asm_diff   = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" simd_diff  = "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(";\n  \n  uint64 ticks_per_sec = measure_tics_per_sec();\n")])]),e("h3",[s._v("I/O")]),e("p",[s._v("Here we use pipes to read input videos and also write output videos to a file. This idea mostly came from "),e("a",{attrs:{href:"https://batchloaf.wordpress.com/2017/02/12/a-simple-way-to-read-and-write-audio-and-video-files-in-c-using-ffmpeg-part-2-video/"}},[s._v("this blog")]),s._v(". We use ffmpeg to provide the input and output streams. Make sure you configure the options based on your settings.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Open an input pipe from ffmpeg and an output pipe to a second instance of ffmpeg")]),s._v("\n  FILE *pipein1 = popen("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ffmpeg -i input1_noisy.mov -f image2pipe -vcodec rawvideo -pix_fmt rgb24 -"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"r"')]),s._v(");\n  FILE *pipein2 = popen("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ffmpeg -i input2_noisy.mov -f image2pipe -vcodec rawvideo -pix_fmt rgb24 -"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"r"')]),s._v(");\n  FILE *pipeout = popen("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"ffmpeg -y -f rawvideo -vcodec rawvideo -pix_fmt rgb24 -s 1796x738 -r 60 -i - -f mp4 -q:v 5 -an -vcodec mpeg4 output.mp4"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"w"')]),s._v(");\n")])]),e("p",[s._v("Finally, we can start the process.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Process video frames")]),s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("while")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(") {\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" diff;\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Read a frame from each of the input pipes into the buffers")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" count1 = fread(frame1, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n_bytes, pipein1);\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("int")]),s._v(" count2 = fread(frame2, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n_bytes, pipein2);\n\n    \n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// If we didn't get a frame of video, we're probably at the end")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("if")]),s._v(" (count1 != n_bytes || count2 != n_bytes)\n      "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("break")]),s._v(";\n       \n")])]),e("p",[s._v("Use C implementation as the trusted operation.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    tic();\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// C-Implementation")]),s._v("\n    merge_frames(H,W,frame1,frame2,frame_out_base);\n    total_time_c += toc();\n")])]),e("p",[s._v("Now do the same with optimized compilation and compare the results")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    tic();\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// C-Implementation (optimized)")]),s._v("\n    merge_frames_opt(H,W,frame1,frame2,frame_out); \n    total_time_c_opt += toc();\n\n    c_opt_diff = maximum(c_opt_diff, array_diff(frame_out_base, frame_out));\n")])]),e("p",[s._v("Make sure to clean the output array for next processes.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("memset")]),s._v("(frame_out, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", n_bytes);\n")])]),e("p",[s._v("Now use basic assembly and compare the results.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    tic();\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//"),e("span",{pre:!0,attrs:{class:"hljs-doctag"}},[s._v("TODO:")]),s._v(" write the body of this function in assembly")]),s._v("\n    merge_frames_asm(H,W,frame1,frame2,frame_out); \n    total_time_asm += toc();\n\n    asm_diff = maximum(asm_diff, array_diff(frame_out_base, frame_out));\n    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("memset")]),s._v("(frame_out, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", n_bytes);\n")])]),e("p",[s._v("Finally, use SIMD and compare the results.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    tic();\n    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("//"),e("span",{pre:!0,attrs:{class:"hljs-doctag"}},[s._v("TODO:")]),s._v(" write the body of this function in assembly")]),s._v("\n    merge_frames_simd(H,W,frame1,frame2,frame_out);\n    total_time_simd += toc();\n    \n    simd_diff = maximum(simd_diff, array_diff(frame_out_base, frame_out));\n    "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("memset")]),s._v("(frame_out, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v(", n_bytes);\n")])]),e("p",[s._v("Oh, let's not forget about sweet visual output ;)")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("    "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Write to the output pipes")]),s._v("\n    fwrite(frame_out_base, "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("1")]),s._v(", n_bytes, pipeout);\n  }\n")])]),e("p",[s._v("Cleaning up the mess.")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("  "),e("span",{pre:!0,attrs:{class:"hljs-comment"}},[s._v("// Flush and close input and output pipes")]),s._v("\n  fflush(pipein1);\n  pclose(pipein1);\n  fflush(pipein2);\n  pclose(pipein2);\n  fflush(pipeout);\n  pclose(pipeout);\n")])]),e("p",[s._v("Let's checkout the results")]),e("pre",{pre:!0},[e("code",{pre:!0,attrs:{"v-pre":"",class:"language-C"}},[s._v("\n  "),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("char")]),s._v(" *stats[] = {"),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"PASSED!"')]),s._v(", "),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"FAILED!"')]),s._v("};\n  \n  "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("printf")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"total_time (C)     = %f\\n"')]),s._v(", total_time_c   / ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("double")]),s._v(") ticks_per_sec);\n  "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("printf")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"total_time (C-OPT) = %f  (%s: %d of %d bytes incorrect)\\n"')]),s._v(",\n\t total_time_c_opt   / ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("double")]),s._v(") ticks_per_sec,\n\t stats[c_opt_diff != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("],\n\t c_opt_diff, n_bytes);\n  \n  "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("printf")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"total_time (ASM)   = %f  (%s: %d of %d bytes incorrect) \\n"')]),s._v(",\n\t total_time_asm / ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("double")]),s._v(") ticks_per_sec,\n\t stats[asm_diff != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("],\n\t asm_diff, n_bytes);\n  \n  "),e("span",{pre:!0,attrs:{class:"hljs-built_in"}},[s._v("printf")]),s._v("("),e("span",{pre:!0,attrs:{class:"hljs-string"}},[s._v('"total_time (SIMD)  = %f  (%s: %d of %d bytes incorrect) \\n"')]),s._v(",\n\t total_time_simd/ ("),e("span",{pre:!0,attrs:{class:"hljs-keyword"}},[s._v("double")]),s._v(") ticks_per_sec,\n\t stats[simd_diff != "),e("span",{pre:!0,attrs:{class:"hljs-number"}},[s._v("0")]),s._v("],\n\t simd_diff, n_bytes);\n}\n")])])])}],n=e("2877"),p={},l=Object(n["a"])(p,t,r,!1,null,null,null);a["default"]=l.exports}}]);
//# sourceMappingURL=chunk-2d2382c5.73775c5a.js.map